{"version":3,"sources":["src/material/material-sidenav.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sidenav","cdk","platform","scrolling","common","core","tslib","a11y","bidi","coercion","keycodes","rxjs","operators","animations","platformBrowser","this","core$1","animations$1","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","box-shadow","transition","animate","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","_super","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_this","call","__extends","prototype","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","decorators","type","Component","args","selector","template","host","class","[style.margin-left.px]","[style.margin-right.px]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ctorParameters","ChangeDetectorRef","MatDrawerContainer","Inject","forwardRef","ElementRef","ScrollDispatcher","NgZone","CdkScrollable","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_autoFocus","_opened","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","runOutsideAngular","fromEvent","nativeElement","pipe","filter","event","keyCode","ESCAPE","disableClose","hasModifierKey","takeUntil","run","close","stopPropagation","preventDefault","distinctUntilChanged","x","y","fromState","toState","indexOf","emit","Object","defineProperty","get","set","value","enumerable","configurable","_updateFocusTrapState","next","coerceBooleanProperty","toggle","o","map","e","mode","autoFocus","focusInitialElementWhenReady","then","hasMovedFocus","focus","activeEl","contains","HTMLElement","focusVia","_openedVia","blur","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","complete","open","openedVia","isOpen","Promise","resolve","take","offsetWidth","enabled","_animationStartListener","_animationDoneListener","exportAs","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-push]","[class.mat-drawer-side]","[class.mat-drawer-opened]","tabIndex","FocusTrapFactory","FocusMonitor","Platform","undefined","Optional","DOCUMENT","propDecorators","Input","HostBinding","Output","_openedStream","openedStart","_closedStream","closedStart","HostListener","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","QueryList","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","_start","_end","_backdropOverride","_userContent","_content","_allDrawers","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","debounceTime","_left","_width","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","asObservable","merge","isAdd","className","remove","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","providers","provide","useExisting","styles","Directionality","ViewportRuler","String","ANIMATION_MODULE_TYPE","ContentChildren","descendants","ContentChild","ViewChild","autosize","hasBackdrop","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","apply","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","coerceNumberProperty","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","NgModule","imports","CommonModule","MatCommonModule","ScrollingModule","PlatformModule","declarations","Éµangular_material_src_material_sidenav_sidenav_a"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,yBAA0BA,QAAQ,0BAA2BA,QAAQ,mBAAoBA,QAAQ,iBAAkBA,QAAQ,0BAA2BA,QAAQ,SAAUA,QAAQ,qBAAsBA,QAAQ,qBAAsBA,QAAQ,yBAA0BA,QAAQ,yBAA0BA,QAAQ,QAASA,QAAQ,kBAAmBA,QAAQ,uBAAwBA,QAAQ,yCAClc,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,4BAA6B,CAAC,UAAW,wBAAyB,yBAA0B,kBAAmB,gBAAiB,yBAA0B,QAAS,oBAAqB,oBAAqB,wBAAyB,wBAAyB,OAAQ,iBAAkB,sBAAuB,wCAAyCJ,GACnXA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,QAAU,IAAKV,EAAOQ,GAAGG,IAAIC,SAAUZ,EAAOQ,GAAGG,IAAIE,UAAWb,EAAOQ,GAAGM,OAAQd,EAAOQ,GAAGO,KAAMf,EAAOQ,GAAGC,SAASM,KAAMf,EAAOgB,MAAOhB,EAAOQ,GAAGG,IAAIM,KAAMjB,EAAOQ,GAAGG,IAAIO,KAAMlB,EAAOQ,GAAGG,IAAIQ,SAAUnB,EAAOQ,GAAGG,IAAIS,SAAUpB,EAAOqB,KAAMrB,EAAOqB,KAAKC,UAAWtB,EAAOQ,GAAGe,WAAYvB,EAAOQ,GAAGgB,gBAAgBD,YAH3b,CAIEE,MAAM,SAAWvB,EAASU,EAAUC,EAAWC,EAAQC,EAAMW,EAAQV,EAAOC,EAAMC,EAAMC,EAAUC,EAAUC,EAAMC,EAAWC,EAAYI,GAAgB;;;;;;;OAavJ,IAAIC,EAAsB,CAEtBC,gBAAiBN,EAAWO,QAAQ,YAAa,CAK7CP,EAAWQ,MAAM,qBAAsBR,EAAWS,MAAM,CACpDC,UAAa,OACbC,WAAc,aAElBX,EAAWQ,MAAM,OAAQR,EAAWS,MAAM,CAEtCG,aAAc,OACdD,WAAc,YAElBX,EAAWa,WAAW,uBAAwBb,EAAWc,QAAQ,QACjEd,EAAWa,WAAW,sCAAuCb,EAAWc,QAAQ,8CAQxF,SAASC,EAA8BC,GACnC,MAAMC,MAAM,iDAAmDD,EAAW,OAG9E,IAAIE,EAA8B,IAAI1B,EAAK2B,eAAe,8BAA+B,CACrFC,WAAY,OACZ1C,QAAS2C,IAMTC,EAAuB,IAAI9B,EAAK2B,eAAe,wBAEnD,SAASE,IACL,OAAO,EAEX,IAAIE,EAAkC,SAAUC,GAE5C,SAASD,EAAiBE,EAAoBC,EAAYC,EAAYC,EAAkBC,GACpF,IAAIC,EAAQN,EAAOO,KAAK7B,KAAMyB,EAAYC,EAAkBC,IAAW3B,KAGvE,OAFA4B,EAAML,mBAAqBA,EAC3BK,EAAMJ,WAAaA,EACZI,EA6BX,OAlCArC,EAAMuC,UAAUT,EAAkBC,GAOlCD,EAAiBU,UAAUC,mBAAqB,WAC5C,IAAIJ,EAAQ5B,KACZA,KAAKwB,WAAWS,sBAAsBC,WAAU,WAC5CN,EAAML,mBAAmBY,mBAGjCd,EAAiBe,WAAa,CAC1B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,qBACVC,SAAU,4BACVC,KAAM,CACFC,MAAS,qBACTC,yBAA0B,kCAC1BC,0BAA2B,oCAE/BC,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAItD9B,EAAiB+B,eAAiB,WAAc,MAAO,CACnD,CAAEf,KAAM/C,EAAK+D,mBACb,CAAEhB,KAAMiB,EAAoBlB,WAAY,CAAC,CAAEC,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACjD,EAAKkE,YAAW,WAAc,OAAOF,SAC1G,CAAEjB,KAAM/C,EAAKmE,YACb,CAAEpB,KAAMjD,EAAUsE,kBAClB,CAAErB,KAAM/C,EAAKqE,UAEVtC,EAnC0B,CAoCnCjC,EAAUwE,eAIRC,EAA2B,WAC3B,SAASA,EAAUC,EAAaC,EAAmBC,EAAeC,EAAWC,EAASC,EAKtF3C,GACI,IAAII,EAAQ5B,KACZA,KAAK8D,YAAcA,EACnB9D,KAAK+D,kBAAoBA,EACzB/D,KAAKgE,cAAgBA,EACrBhE,KAAKiE,UAAYA,EACjBjE,KAAKkE,QAAUA,EACflE,KAAKmE,KAAOA,EACZnE,KAAKwB,WAAaA,EAClBxB,KAAKoE,qCAAuC,KAE5CpE,KAAKqE,mBAAoB,EACzBrE,KAAKsE,UAAY,QACjBtE,KAAKuE,MAAQ,OACbvE,KAAKwE,eAAgB,EACrBxE,KAAKyE,YAAa,EAClBzE,KAAK0E,SAAU,EAEf1E,KAAK2E,kBAAoB,IAAI/E,EAAKgF,QAElC5E,KAAK6E,cAAgB,IAAIjF,EAAKgF,QAM9B5E,KAAK8E,gBAAkB,OAEvB9E,KAAK+E,aAEL,IAAIzF,EAAK0F,cAA2B,GAEpChF,KAAKiF,WAAa,IAAIrF,EAAKgF,QAG3B5E,KAAKkF,kBAAoB,IAAI5F,EAAK0F,aAKlChF,KAAKmF,aAAe,IAAIvF,EAAKgF,QAC7B5E,KAAK+E,aAAa7C,WAAU,SAAUkD,GAC9BA,GACIxD,EAAMuC,OACNvC,EAAMwC,qCAAuCxC,EAAMuC,KAAKkB,eAExDzD,EAAM0D,qBAAuB1D,EAAM2D,YACnC3D,EAAM4D,cAIV5D,EAAM6D,mBAQdzF,KAAKkE,QAAQwB,mBAAkB,WAC3B9F,EAAK+F,UAAU/D,EAAMkC,YAAY8B,cAAe,WAAWC,KAAKhG,EAAUiG,QAAO,SAAUC,GACvF,OAAOA,EAAMC,UAAYrG,EAASsG,SAAWrE,EAAMsE,eAAiBvG,EAASwG,eAAeJ,MAC5FlG,EAAUuG,UAAUxE,EAAMqD,aAAa/C,WAAU,SAAU6D,GAAS,OAAOnE,EAAMsC,QAAQmC,KAAI,WAC7FzE,EAAM0E,QACNP,EAAMQ,kBACNR,EAAMS,0BAKdxG,KAAK6E,cAAcgB,KAAKhG,EAAU4G,sBAAqB,SAAUC,EAAGC,GAChE,OAAOD,EAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,YACtD3E,WAAU,SAAU6D,GACpB,IAAIa,EAAYb,EAAMa,UAAWC,EAAUd,EAAMc,SAChB,IAA5BA,EAAQC,QAAQ,SAA+B,SAAdF,GACrB,SAAZC,GAAoD,IAA9BD,EAAUE,QAAQ,UACzClF,EAAMmD,aAAagC,KAAKnF,EAAM8C,YAsQ1C,OAlQAsC,OAAOC,eAAepD,EAAU9B,UAAW,WAAY,CAEnDmF,IAAK,WAAc,OAAOlH,KAAKsE,WAC/B6C,IAAK,SAAUC,IAEXA,EAAkB,QAAVA,EAAkB,MAAQ,UACrBpH,KAAKsE,YACdtE,KAAKsE,UAAY8C,EACjBpH,KAAKkF,kBAAkB6B,SAG/BM,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,OAAQ,CAE/CmF,IAAK,WAAc,OAAOlH,KAAKuE,OAC/B4C,IAAK,SAAUC,GACXpH,KAAKuE,MAAQ6C,EACbpH,KAAKuH,wBACLvH,KAAKmF,aAAaqC,QAEtBH,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,eAAgB,CAEvDmF,IAAK,WAAc,OAAOlH,KAAKwE,eAC/B2C,IAAK,SAAUC,GAASpH,KAAKwE,cAAgB9E,EAAS+H,sBAAsBL,IAC5EC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,YAAa,CAEpDmF,IAAK,WAAc,OAAOlH,KAAKyE,YAC/B0C,IAAK,SAAUC,GAASpH,KAAKyE,WAAa/E,EAAS+H,sBAAsBL,IACzEC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,SAAU,CAKjDmF,IAAK,WAAc,OAAOlH,KAAK0E,SAC/ByC,IAAK,SAAUC,GAASpH,KAAK0H,OAAOhI,EAAS+H,sBAAsBL,KACnEC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,gBAAiB,CAExDmF,IAAK,WACD,OAAOlH,KAAK+E,aAAac,KAAKhG,EAAUiG,QAAO,SAAU6B,GAAK,OAAOA,KAAO9H,EAAU+H,KAAI,iBAE9FP,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,cAAe,CAEtDmF,IAAK,WACD,OAAOlH,KAAK2E,kBAAkBkB,KAAKhG,EAAUiG,QAAO,SAAU+B,GAAK,OAAOA,EAAEjB,YAAciB,EAAEhB,SAAyC,IAA9BgB,EAAEhB,QAAQC,QAAQ,WAAmBjH,EAAU+H,KAAI,iBAE9JP,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,gBAAiB,CAExDmF,IAAK,WACD,OAAOlH,KAAK+E,aAAac,KAAKhG,EAAUiG,QAAO,SAAU6B,GAAK,OAAQA,KAAO9H,EAAU+H,KAAI,iBAE/FP,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,cAAe,CAEtDmF,IAAK,WACD,OAAOlH,KAAK2E,kBAAkBkB,KAAKhG,EAAUiG,QAAO,SAAU+B,GAAK,OAAOA,EAAEjB,YAAciB,EAAEhB,SAAyB,SAAdgB,EAAEhB,WAAwBhH,EAAU+H,KAAI,iBAEnJP,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAepD,EAAU9B,UAAW,sBAAuB,CAC9DmF,IAAK,WAED,OAAOlH,KAAKoF,QAAwB,SAAdpF,KAAK8H,MAE/BT,YAAY,EACZC,cAAc,IAGlBzD,EAAU9B,UAAUyD,WAAa,WAC7B,IAAI5D,EAAQ5B,KACPA,KAAK+H,WAGV/H,KAAKuF,WAAWyC,+BAA+BC,MAAK,SAAUC,GAGrDA,GAAkE,mBAA1CtG,EAAMkC,YAAY8B,cAAcuC,OACzDvG,EAAMkC,YAAY8B,cAAcuC,YAQ5CtE,EAAU9B,UAAU0D,cAAgB,WAChC,GAAKzF,KAAK+H,UAAV,CAGA,IAAIK,EAAWpI,KAAKmE,MAAQnE,KAAKmE,KAAKkB,cAClC+C,GAAYpI,KAAK8D,YAAY8B,cAAcyC,SAASD,KAChDpI,KAAKoE,gDAAgDkE,YACrDtI,KAAKgE,cAAcuE,SAASvI,KAAKoE,qCAAsCpE,KAAKwI,YAG5ExI,KAAK8D,YAAY8B,cAAc6C,QAGvCzI,KAAKoE,qCAAuC,KAC5CpE,KAAKwI,WAAa,OAEtB3E,EAAU9B,UAAUC,mBAAqB,WACrChC,KAAKuF,WAAavF,KAAK+D,kBAAkB2E,OAAO1I,KAAK8D,YAAY8B,eACjE5F,KAAKuH,yBAET1D,EAAU9B,UAAU4G,sBAAwB,WAKpC3I,KAAKiE,UAAU2E,YACf5I,KAAKqE,mBAAoB,IAGjCR,EAAU9B,UAAU8G,YAAc,WAC1B7I,KAAKuF,YACLvF,KAAKuF,WAAWuD,UAEpB9I,KAAK2E,kBAAkBoE,WACvB/I,KAAK6E,cAAckE,WACnB/I,KAAKmF,aAAa4D,WAClB/I,KAAKiF,WAAWuC,OAChBxH,KAAKiF,WAAW8D,YAOpBlF,EAAU9B,UAAUiH,KAAO,SAAUC,GACjC,OAAOjJ,KAAK0H,QAAO,EAAMuB,IAG7BpF,EAAU9B,UAAUuE,MAAQ,WACxB,OAAOtG,KAAK0H,QAAO,IAQvB7D,EAAU9B,UAAU2F,OAAS,SAAUwB,EAAQD,GAC3C,IAAIrH,EAAQ5B,KAaZ,YAZe,IAAXkJ,IAAqBA,GAAUlJ,KAAKoF,aACtB,IAAd6D,IAAwBA,EAAY,WACxCjJ,KAAK0E,QAAUwE,EACXA,GACAlJ,KAAK8E,gBAAkB9E,KAAKqE,kBAAoB,OAAS,eACzDrE,KAAKwI,WAAaS,IAGlBjJ,KAAK8E,gBAAkB,OACvB9E,KAAKyF,iBAETzF,KAAKuH,wBACE,IAAI4B,SAAQ,SAAUC,GACzBxH,EAAMmD,aAAac,KAAKhG,EAAUwJ,KAAK,IAAInH,WAAU,SAAU8G,GAAQ,OAAOI,EAAQJ,EAAO,OAAS,gBAG9GhC,OAAOC,eAAepD,EAAU9B,UAAW,SAAU,CACjDmF,IAAK,WACD,OAAOlH,KAAK8D,YAAY8B,eAAiB5F,KAAK8D,YAAY8B,cAAc0D,aAAoB,GAEhGjC,YAAY,EACZC,cAAc,IAGlBzD,EAAU9B,UAAUwF,sBAAwB,WACpCvH,KAAKuF,aACLvF,KAAKuF,WAAWgE,QAAUvJ,KAAKsF,sBAQvCzB,EAAU9B,UAAUyH,wBAA0B,SAAUzD,GACpD/F,KAAK2E,kBAAkB6C,KAAKzB,IAOhClC,EAAU9B,UAAU0H,uBAAyB,SAAU1D,GACnD/F,KAAK6E,cAAc2C,KAAKzB,IAE5BlC,EAAUzB,WAAa,CACnB,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,aACVkH,SAAU,YACVjH,SAAU,wFACV3C,WAAY,CAACK,EAAoBC,iBACjCsC,KAAM,CACFC,MAAS,aAETgH,eAAgB,OAChBC,yBAA0B,qBAC1BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,4BAA6B,SAC7BC,SAAY,MAEhBnH,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAItDU,EAAUT,eAAiB,WAAc,MAAO,CAC5C,CAAEf,KAAM/C,EAAKmE,YACb,CAAEpB,KAAM7C,EAAK0K,kBACb,CAAE7H,KAAM7C,EAAK2K,cACb,CAAE9H,KAAMlD,EAASiL,UACjB,CAAE/H,KAAM/C,EAAKqE,QACb,CAAEtB,UAAMgI,EAAWjI,WAAY,CAAC,CAAEC,KAAM/C,EAAKgL,UAAY,CAAEjI,KAAM/C,EAAKiE,OAAQhB,KAAM,CAAClD,EAAOkL,aAC5F,CAAElI,KAAMiB,EAAoBlB,WAAY,CAAC,CAAEC,KAAM/C,EAAKgL,UAAY,CAAEjI,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACnB,QAElGyC,EAAU2G,eAAiB,CACvB1J,SAAU,CAAC,CAAEuB,KAAM/C,EAAKmL,QACxB3C,KAAM,CAAC,CAAEzF,KAAM/C,EAAKmL,QACpBvE,aAAc,CAAC,CAAE7D,KAAM/C,EAAKmL,QAC5B1C,UAAW,CAAC,CAAE1F,KAAM/C,EAAKmL,QACzBrF,OAAQ,CAAC,CAAE/C,KAAM/C,EAAKmL,QACtB3F,gBAAiB,CAAC,CAAEzC,KAAM/C,EAAKoL,YAAanI,KAAM,CAAC,gBACnDwC,aAAc,CAAC,CAAE1C,KAAM/C,EAAKqL,SAC5BC,cAAe,CAAC,CAAEvI,KAAM/C,EAAKqL,OAAQpI,KAAM,CAAC,YAC5CsI,YAAa,CAAC,CAAExI,KAAM/C,EAAKqL,SAC3BG,cAAe,CAAC,CAAEzI,KAAM/C,EAAKqL,OAAQpI,KAAM,CAAC,YAC5CwI,YAAa,CAAC,CAAE1I,KAAM/C,EAAKqL,SAC3BzF,kBAAmB,CAAC,CAAE7C,KAAM/C,EAAKqL,OAAQpI,KAAM,CAAC,qBAChDiH,wBAAyB,CAAC,CAAEnH,KAAM/C,EAAK0L,aAAczI,KAAM,CAAC,mBAAoB,CAAC,aACjFkH,uBAAwB,CAAC,CAAEpH,KAAM/C,EAAK0L,aAAczI,KAAM,CAAC,kBAAmB,CAAC,cAE5EsB,EAxVmB,GAgW1BP,EAAoC,WACpC,SAASA,EAAmB2H,EAAMC,EAAUhH,EAAS3C,EAAoB4J,EAAeC,EAAiBC,GACrG,IAAIzJ,EAAQ5B,UACY,IAApBoL,IAA8BA,GAAkB,GACpDpL,KAAKiL,KAAOA,EACZjL,KAAKkL,SAAWA,EAChBlL,KAAKkE,QAAUA,EACflE,KAAKuB,mBAAqBA,EAC1BvB,KAAKqL,eAAiBA,EAEtBrL,KAAKsL,SAAW,IAAIhM,EAAKiM,UAEzBvL,KAAKwL,cAAgB,IAAIlM,EAAK0F,aAE9BhF,KAAKiF,WAAa,IAAIrF,EAAKgF,QAE3B5E,KAAKyL,gBAAkB,IAAI7L,EAAKgF,QAMhC5E,KAAK0L,gBAAkB,CAAEC,KAAM,KAAMC,MAAO,MAC5C5L,KAAKiC,sBAAwB,IAAIrC,EAAKgF,QAGlCqG,GACAA,EAAKY,OAAOhG,KAAKhG,EAAUuG,UAAUpG,KAAKiF,aAAa/C,WAAU,WAC7DN,EAAMkK,mBACNlK,EAAMmK,0BAKdZ,EAAcU,SACThG,KAAKhG,EAAUuG,UAAUpG,KAAKiF,aAC9B/C,WAAU,WAAc,OAAON,EAAMmK,0BAC1C/L,KAAKgM,UAAYZ,EAoTrB,OAlTApE,OAAOC,eAAe3D,EAAmBvB,UAAW,QAAS,CAEzDmF,IAAK,WAAc,OAAOlH,KAAKiM,QAC/B5E,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAe3D,EAAmBvB,UAAW,MAAO,CAEvDmF,IAAK,WAAc,OAAOlH,KAAKkM,MAC/B7E,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAe3D,EAAmBvB,UAAW,WAAY,CAS5DmF,IAAK,WAAc,OAAOlH,KAAKgM,WAC/B7E,IAAK,SAAUC,GAASpH,KAAKgM,UAAYtM,EAAS+H,sBAAsBL,IACxEC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAe3D,EAAmBvB,UAAW,cAAe,CAM/DmF,IAAK,WACD,OAA8B,MAA1BlH,KAAKmM,mBACGnM,KAAKiM,QAA+B,SAArBjM,KAAKiM,OAAOnE,OAAoB9H,KAAKkM,MAA2B,SAAnBlM,KAAKkM,KAAKpE,KAE3E9H,KAAKmM,mBAEhBhF,IAAK,SAAUC,GACXpH,KAAKmM,kBAA6B,MAAT/E,EAAgB,KAAO1H,EAAS+H,sBAAsBL,IAEnFC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAe3D,EAAmBvB,UAAW,aAAc,CAE9DmF,IAAK,WACD,OAAOlH,KAAKoM,cAAgBpM,KAAKqM,UAErChF,YAAY,EACZC,cAAc,IAElBhE,EAAmBvB,UAAUC,mBAAqB,WAC9C,IAAIJ,EAAQ5B,KACZA,KAAKsM,YAAYC,QACZ1G,KAAKhG,EAAU2M,UAAUxM,KAAKsM,aAAczM,EAAUuG,UAAUpG,KAAKiF,aACrE/C,WAAU,SAAUuK,GAErB7K,EAAM0J,SAASoB,MAAMD,EAAO3G,QAAO,SAAU6G,GAAQ,OAAQA,EAAKnL,YAAcmL,EAAKnL,aAAeI,MACpGA,EAAM0J,SAASsB,qBAEnB5M,KAAKsL,SAASiB,QAAQ1G,KAAKhG,EAAU2M,UAAU,OAAOtK,WAAU,WAC5DN,EAAMkK,mBACNlK,EAAM0J,SAASuB,SAAQ,SAAUJ,GAC7B7K,EAAMkL,mBAAmBL,GACzB7K,EAAMmL,qBAAqBN,GAC3B7K,EAAMoL,iBAAiBP,QAEtB7K,EAAM0J,SAAS2B,QAChBrL,EAAMsL,cAActL,EAAMqK,SAC1BrK,EAAMsL,cAActL,EAAMsK,QAC1BtK,EAAMmK,uBAEVnK,EAAML,mBAAmBY,kBAE7BnC,KAAKyL,gBAAgB5F,KAAKhG,EAAUsN,aAAa,IACjDtN,EAAUuG,UAAUpG,KAAKiF,aAAa/C,WAAU,WAAc,OAAON,EAAMmK,2BAE/EzI,EAAmBvB,UAAU8G,YAAc,WACvC7I,KAAKiC,sBAAsB8G,WAC3B/I,KAAKyL,gBAAgB1C,WACrB/I,KAAKsL,SAASxC,UACd9I,KAAKiF,WAAWuC,OAChBxH,KAAKiF,WAAW8D,YAGpBzF,EAAmBvB,UAAUiH,KAAO,WAChChJ,KAAKsL,SAASuB,SAAQ,SAAUJ,GAAU,OAAOA,EAAOzD,WAG5D1F,EAAmBvB,UAAUuE,MAAQ,WACjCtG,KAAKsL,SAASuB,SAAQ,SAAUJ,GAAU,OAAOA,EAAOnG,YAM5DhD,EAAmBvB,UAAUgK,qBAAuB,WAChD,IAAInK,EAAQ5B,KAOR2L,EAAO,EACPC,EAAQ,EAWZ,GAVI5L,KAAKoN,OAASpN,KAAKoN,MAAMhI,SACF,QAAnBpF,KAAKoN,MAAMtF,KACX6D,GAAQ3L,KAAKoN,MAAMC,OAEK,QAAnBrN,KAAKoN,MAAMtF,OAEhB6D,GADI2B,EAAQtN,KAAKoN,MAAMC,OAEvBzB,GAAS0B,IAGbtN,KAAKuN,QAAUvN,KAAKuN,OAAOnI,OAC3B,GAAwB,QAApBpF,KAAKuN,OAAOzF,KACZ8D,GAAS5L,KAAKuN,OAAOF,YAEpB,GAAwB,QAApBrN,KAAKuN,OAAOzF,KAAgB,CACjC,IAAIwF,EACJ1B,GADI0B,EAAQtN,KAAKuN,OAAOF,OAExB1B,GAAQ2B,EAQhB1B,EAAQA,GAAS,MADjBD,EAAOA,GAAQ,QAEF3L,KAAK0L,gBAAgBC,MAAQC,IAAU5L,KAAK0L,gBAAgBE,QACrE5L,KAAK0L,gBAAkB,CAAEC,KAAMA,EAAMC,MAAOA,GAG5C5L,KAAKkE,QAAQmC,KAAI,WAAc,OAAOzE,EAAMK,sBAAsBuF,KAAK5F,EAAM8J,sBAGrFpI,EAAmBvB,UAAUyL,UAAY,WACrC,IAAI5L,EAAQ5B,KAERA,KAAKgM,WAAahM,KAAKyN,aAEvBzN,KAAKkE,QAAQwB,mBAAkB,WAAc,OAAO9D,EAAM6J,gBAAgBjE,WAQlFlE,EAAmBvB,UAAU+K,mBAAqB,SAAUL,GACxD,IAAI7K,EAAQ5B,KACZyM,EAAO9H,kBAAkBkB,KAAKhG,EAAUiG,QAAO,SAAUC,GAAS,OAAOA,EAAMa,YAAcb,EAAMc,WAAahH,EAAUuG,UAAUpG,KAAKsL,SAASiB,UAC7IrK,WAAU,SAAU6D,GAGC,iBAAlBA,EAAMc,SAAuD,mBAAzBjF,EAAMyJ,gBAC1CzJ,EAAMsJ,SAAStF,cAAc8H,UAAUC,IAAI,yBAE/C/L,EAAMmK,uBACNnK,EAAML,mBAAmBY,kBAET,SAAhBsK,EAAO3E,MACP2E,EAAO1H,aAAac,KAAKhG,EAAUuG,UAAUpG,KAAKsL,SAASiB,UAAUrK,WAAU,WAC3E,OAAON,EAAMgM,mBAAmBnB,EAAOrH,YAQnD9B,EAAmBvB,UAAUgL,qBAAuB,SAAUN,GAC1D,IAAI7K,EAAQ5B,KACPyM,GAKLA,EAAOvH,kBAAkBW,KAAKhG,EAAUuG,UAAUpG,KAAKsL,SAASiB,UAAUrK,WAAU,WAChFN,EAAMsC,QAAQ2J,iBAAiBC,eAAejI,KAAKhG,EAAUwJ,KAAK,IAAInH,WAAU,WAC5EN,EAAMkK,0BAKlBxI,EAAmBvB,UAAUiL,iBAAmB,SAAUP,GACtD,IAAI7K,EAAQ5B,KACRyM,GACAA,EAAOtH,aAAaU,KAAKhG,EAAUuG,UAAUxG,EAAKmO,MAAM/N,KAAKsL,SAASiB,QAASvM,KAAKiF,cAC/E/C,WAAU,WACXN,EAAMmK,uBACNnK,EAAML,mBAAmBY,mBAKrCmB,EAAmBvB,UAAU6L,mBAAqB,SAAUI,GACxD,IAAIN,EAAY1N,KAAKkL,SAAStF,cAAc8H,UACxCO,EAAY,gCACZD,EACAN,EAAUC,IAAIM,GAGdP,EAAUQ,OAAOD,IAIzB3K,EAAmBvB,UAAU+J,iBAAmB,WAC5C,IAAIlK,EAAQ5B,KACZA,KAAKiM,OAASjM,KAAKkM,KAAO,KAE1BlM,KAAKsL,SAASuB,SAAQ,SAAUJ,GACL,OAAnBA,EAAO3L,UACW,MAAdc,EAAMsK,MACNrL,EAA8B,OAElCe,EAAMsK,KAAOO,IAGO,MAAhB7K,EAAMqK,QACNpL,EAA8B,SAElCe,EAAMqK,OAASQ,MAGvBzM,KAAKuN,OAASvN,KAAKoN,MAAQ,KAEvBpN,KAAKiL,MAA4B,QAApBjL,KAAKiL,KAAK7D,OACvBpH,KAAKoN,MAAQpN,KAAKkM,KAClBlM,KAAKuN,OAASvN,KAAKiM,SAGnBjM,KAAKoN,MAAQpN,KAAKiM,OAClBjM,KAAKuN,OAASvN,KAAKkM,OAI3B5I,EAAmBvB,UAAU0L,UAAY,WACrC,OAAQzN,KAAKkN,cAAclN,KAAKiM,SAA+B,QAApBjM,KAAKiM,OAAOnE,MAClD9H,KAAKkN,cAAclN,KAAKkM,OAA2B,QAAlBlM,KAAKkM,KAAKpE,MAEpDxE,EAAmBvB,UAAUoM,mBAAqB,WAC9CnO,KAAKwL,cAAczE,OACnB/G,KAAKoO,qBAET9K,EAAmBvB,UAAUqM,kBAAoB,WAC7C,IAAIxM,EAAQ5B,KAEZ,CAACA,KAAKiM,OAAQjM,KAAKkM,MACdpG,QAAO,SAAU2G,GAAU,OAAOA,IAAWA,EAAOvG,cAAgBtE,EAAMyM,iBAAiB5B,MAC3FI,SAAQ,SAAUJ,GAAU,OAAOA,EAAOnG,YAEnDhD,EAAmBvB,UAAUuM,mBAAqB,WAC9C,OAAQtO,KAAKkN,cAAclN,KAAKiM,SAAWjM,KAAKqO,iBAAiBrO,KAAKiM,SACjEjM,KAAKkN,cAAclN,KAAKkM,OAASlM,KAAKqO,iBAAiBrO,KAAKkM,OAErE5I,EAAmBvB,UAAUsM,iBAAmB,SAAU5B,GACtD,MAAuB,SAAhBA,EAAO3E,QAAqB9H,KAAKmM,mBAE5C7I,EAAmBvB,UAAUmL,cAAgB,SAAUT,GACnD,OAAiB,MAAVA,GAAkBA,EAAOrH,QAEpC9B,EAAmBlB,WAAa,CAC5B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,uBACVkH,SAAU,qBACVjH,SAAU,6VACVC,KAAM,CACFC,MAAS,uBACT4L,iDAAkD,qBAEtDzL,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,KACtCqL,UAAW,CAAC,CACJC,QAASrN,EACTsN,YAAapL,IAErBqL,OAAQ,CAAC,mpEAIzBrL,EAAmBF,eAAiB,WAAc,MAAO,CACrD,CAAEf,KAAM5C,EAAKmP,eAAgBxM,WAAY,CAAC,CAAEC,KAAM/C,EAAKgL,YACvD,CAAEjI,KAAM/C,EAAKmE,YACb,CAAEpB,KAAM/C,EAAKqE,QACb,CAAEtB,KAAM/C,EAAK+D,mBACb,CAAEhB,KAAMjD,EAAUyP,eAClB,CAAExM,UAAMgI,EAAWjI,WAAY,CAAC,CAAEC,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACvB,MAC5D,CAAEqB,KAAMyM,OAAQ1M,WAAY,CAAC,CAAEC,KAAM/C,EAAKgL,UAAY,CAAEjI,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACrC,EAAa6O,4BAEnGzL,EAAmBkH,eAAiB,CAChC8B,YAAa,CAAC,CAAEjK,KAAM/C,EAAK0P,gBAAiBzM,KAAM,CAACsB,EAAW,CAG9CoL,aAAa,MAE7B5C,SAAU,CAAC,CAAEhK,KAAM/C,EAAK4P,aAAc3M,KAAM,CAAClB,KAC7C+K,aAAc,CAAC,CAAE/J,KAAM/C,EAAK6P,UAAW5M,KAAM,CAAClB,KAC9C+N,SAAU,CAAC,CAAE/M,KAAM/C,EAAKmL,QACxB4E,YAAa,CAAC,CAAEhN,KAAM/C,EAAKmL,QAC3Be,cAAe,CAAC,CAAEnJ,KAAM/C,EAAKqL,UAE1BrH,EAzV4B,GAmWnCgM,EAAmC,SAAUhO,GAE7C,SAASgO,EAAkBC,EAAmBC,EAAW/N,EAAYC,EAAkBC,GACnF,OAAOL,EAAOO,KAAK7B,KAAMuP,EAAmBC,EAAW/N,EAAYC,EAAkBC,IAAW3B,KAuBpG,OAzBAT,EAAMuC,UAAUwN,EAAmBhO,GAInCgO,EAAkBlN,WAAa,CAC3B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,sBACVC,SAAU,4BACVC,KAAM,CACFC,MAAS,yCACTC,yBAA0B,kCAC1BC,0BAA2B,oCAE/BC,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAItDmM,EAAkBlM,eAAiB,WAAc,MAAO,CACpD,CAAEf,KAAM/C,EAAK+D,mBACb,CAAEhB,KAAMoN,EAAqBrN,WAAY,CAAC,CAAEC,KAAM/C,EAAKiE,OAAQhB,KAAM,CAACjD,EAAKkE,YAAW,WAAc,OAAOiM,SAC3G,CAAEpN,KAAM/C,EAAKmE,YACb,CAAEpB,KAAMjD,EAAUsE,kBAClB,CAAErB,KAAM/C,EAAKqE,UAEV2L,EA1B2B,CA2BpCjO,GACEqO,EAA4B,SAAUpO,GAEtC,SAASoO,IACL,IAAI9N,EAAmB,OAAXN,GAAmBA,EAAOqO,MAAM3P,KAAM4P,YAAc5P,KAIhE,OAHA4B,EAAMiO,kBAAmB,EACzBjO,EAAMkO,aAAe,EACrBlO,EAAMmO,gBAAkB,EACjBnO,EA0DX,OAhEArC,EAAMuC,UAAU4N,EAAYpO,GAQ5B0F,OAAOC,eAAeyI,EAAW3N,UAAW,kBAAmB,CAE3DmF,IAAK,WAAc,OAAOlH,KAAK6P,kBAC/B1I,IAAK,SAAUC,GAASpH,KAAK6P,iBAAmBnQ,EAAS+H,sBAAsBL,IAC/EC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAeyI,EAAW3N,UAAW,cAAe,CAKvDmF,IAAK,WAAc,OAAOlH,KAAK8P,cAC/B3I,IAAK,SAAUC,GAASpH,KAAK8P,aAAepQ,EAASsQ,qBAAqB5I,IAC1EC,YAAY,EACZC,cAAc,IAElBN,OAAOC,eAAeyI,EAAW3N,UAAW,iBAAkB,CAK1DmF,IAAK,WAAc,OAAOlH,KAAK+P,iBAC/B5I,IAAK,SAAUC,GAASpH,KAAK+P,gBAAkBrQ,EAASsQ,qBAAqB5I,IAC7EC,YAAY,EACZC,cAAc,IAElBoI,EAAWtN,WAAa,CACpB,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,cACVkH,SAAU,aACVjH,SAAU,wFACV3C,WAAY,CAACK,EAAoBC,iBACjCsC,KAAM,CACFC,MAAS,yBACTsH,SAAY,KAEZN,eAAgB,OAChBC,yBAA0B,qBAC1BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,0BAA2B,kBAC3BC,4BAA6B,SAC7BiG,4BAA6B,kBAC7BC,iBAAkB,uCAClBC,oBAAqB,2CAEzBrN,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,SAGtDuM,EAAWlF,eAAiB,CACxB4F,gBAAiB,CAAC,CAAE/N,KAAM/C,EAAKmL,QAC/B4F,YAAa,CAAC,CAAEhO,KAAM/C,EAAKmL,QAC3B6F,eAAgB,CAAC,CAAEjO,KAAM/C,EAAKmL,SAE3BiF,EAjEoB,CAkE7B7L,GACE4L,EAAqC,SAAUnO,GAE/C,SAASmO,IACL,OAAkB,OAAXnO,GAAmBA,EAAOqO,MAAM3P,KAAM4P,YAAc5P,KA4B/D,OA9BAT,EAAMuC,UAAU2N,EAAqBnO,GAIrCmO,EAAoBrN,WAAa,CAC7B,CAAEC,KAAM/C,EAAKgD,UAAWC,KAAM,CAAC,CACnBC,SAAU,wBACVkH,SAAU,sBACVjH,SAAU,+WACVC,KAAM,CACFC,MAAS,6CACT4L,iDAAkD,qBAEtDzL,gBAAiBxD,EAAKyD,wBAAwBC,OAC9CC,cAAe3D,EAAK4D,kBAAkBC,KACtCqL,UAAW,CAAC,CACJC,QAASrN,EACTsN,YAAae,IAErBd,OAAQ,CAAC,mpEAGzBc,EAAoBjF,eAAiB,CACjC8B,YAAa,CAAC,CAAEjK,KAAM/C,EAAK0P,gBAAiBzM,KAAM,CAACmN,EAAY,CAG/CT,aAAa,MAE7B5C,SAAU,CAAC,CAAEhK,KAAM/C,EAAK4P,aAAc3M,KAAM,CAAC+M,MAE1CG,EA/B6B,CAgCtCnM,GASEiN,EAAkC,WAClC,SAASA,KA6BT,OA3BAA,EAAiBnO,WAAa,CAC1B,CAAEC,KAAM/C,EAAKkR,SAAUjO,KAAM,CAAC,CAClBkO,QAAS,CACLpR,EAAOqR,aACPzQ,EAAO0Q,gBACPvR,EAAUwR,gBACVzR,EAAS0R,gBAEbpS,QAAS,CACLwB,EAAO0Q,gBACP9M,EACAP,EACAjC,EACAqO,EACAD,EACAH,GAEJwB,aAAc,CACVjN,EACAP,EACAjC,EACAqO,EACAD,EACAH,OAIbiB,EA9B0B;;;;;;;;AA6CrC9R,EAAQuC,4BAA8BA,EACtCvC,EAAQ0C,oCAAsCA,EAC9C1C,EAAQoF,UAAYA,EACpBpF,EAAQ6E,mBAAqBA,EAC7B7E,EAAQ4C,iBAAmBA,EAC3B5C,EAAQiR,WAAaA,EACrBjR,EAAQgR,oBAAsBA,EAC9BhR,EAAQ6Q,kBAAoBA,EAC5B7Q,EAAQ8R,iBAAmBA,EAC3B9R,EAAQ0B,oBAAsBA,EAC9B1B,EAAQoC,8BAAgCA,EACxCpC,EAAQsS,iDAAmD3P,EAE3D4F,OAAOC,eAAexI,EAAS,aAAc,CAAE2I,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sidenav', ['exports', '@angular/cdk/platform', '@angular/cdk/scrolling', '@angular/common', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/keycodes', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sidenav = {}), global.ng.cdk.platform, global.ng.cdk.scrolling, global.ng.common, global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.platformBrowser.animations));\n}(this, (function (exports, platform, scrolling, common, core, core$1, tslib, a11y, bidi, coercion, keycodes, rxjs, operators, animations, animations$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the Material drawers.\n     * @docs-private\n     */\n    var matDrawerAnimations = {\n        /** Animation that slides a drawer in and out. */\n        transformDrawer: animations.trigger('transform', [\n            // We remove the `transform` here completely, rather than setting it to zero, because:\n            // 1. Having a transform can cause elements with ripples or an animated\n            //    transform to shift around in Chrome with an RTL layout (see #10023).\n            // 2. 3d transforms causes text to appear blurry on IE and Edge.\n            animations.state('open, open-instant', animations.style({\n                'transform': 'none',\n                'visibility': 'visible',\n            })),\n            animations.state('void', animations.style({\n                // Avoids the shadow showing up when closed in SSR.\n                'box-shadow': 'none',\n                'visibility': 'hidden',\n            })),\n            animations.transition('void => open-instant', animations.animate('0ms')),\n            animations.transition('void <=> open, open-instant => void', animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n        ])\n    };\n\n    /**\n     * Throws an exception when two MatDrawer are matching the same position.\n     * @docs-private\n     */\n    function throwMatDuplicatedDrawerError(position) {\n        throw Error(\"A drawer was already declared for 'position=\\\"\" + position + \"\\\"'\");\n    }\n    /** Configures whether drawers should use auto sizing by default. */\n    var MAT_DRAWER_DEFAULT_AUTOSIZE = new core.InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n        providedIn: 'root',\n        factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n    /**\n     * Used to provide a drawer container to a drawer while avoiding circular references.\n     * @docs-private\n     */\n    var MAT_DRAWER_CONTAINER = new core.InjectionToken('MAT_DRAWER_CONTAINER');\n    /** @docs-private */\n    function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n        return false;\n    }\n    var MatDrawerContent = /** @class */ (function (_super) {\n        tslib.__extends(MatDrawerContent, _super);\n        function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._container = _container;\n            return _this;\n        }\n        MatDrawerContent.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._container._contentMarginChanges.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        MatDrawerContent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-drawer-content',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-drawer-content',\n                            '[style.margin-left.px]': '_container._contentMargins.left',\n                            '[style.margin-right.px]': '_container._contentMargins.right',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawerContent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: MatDrawerContainer, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return MatDrawerContainer; }),] }] },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.NgZone }\n        ]; };\n        return MatDrawerContent;\n    }(scrolling.CdkScrollable));\n    /**\n     * This component corresponds to a drawer that can be opened on the drawer container.\n     */\n    var MatDrawer = /** @class */ (function () {\n        function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, \n        /**\n         * @deprecated `_container` parameter to be made required.\n         * @breaking-change 10.0.0\n         */\n        _container) {\n            var _this = this;\n            this._elementRef = _elementRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            this._focusMonitor = _focusMonitor;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._doc = _doc;\n            this._container = _container;\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            /** Whether the drawer is initialized. Used for disabling the initial animation. */\n            this._enableAnimations = false;\n            this._position = 'start';\n            this._mode = 'over';\n            this._disableClose = false;\n            this._autoFocus = true;\n            this._opened = false;\n            /** Emits whenever the drawer has started animating. */\n            this._animationStarted = new rxjs.Subject();\n            /** Emits whenever the drawer is done animating. */\n            this._animationEnd = new rxjs.Subject();\n            /** Current state of the sidenav animation. */\n            // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n            // metadata is not inherited by child classes, instead the host binding data is defined in a way\n            // that can be inherited.\n            // tslint:disable:no-host-decorator-in-concrete\n            this._animationState = 'void';\n            /** Event emitted when the drawer open state is changed. */\n            this.openedChange = \n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new core.EventEmitter(/* isAsync */ true);\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Event emitted when the drawer's position changes. */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onPositionChanged = new core.EventEmitter();\n            /**\n             * An observable that emits when the drawer mode changes. This is used by the drawer container to\n             * to know when to when the mode changes so it can adapt the margins on the content.\n             */\n            this._modeChanged = new rxjs.Subject();\n            this.openedChange.subscribe(function (opened) {\n                if (opened) {\n                    if (_this._doc) {\n                        _this._elementFocusedBeforeDrawerWasOpened = _this._doc.activeElement;\n                    }\n                    if (_this._isFocusTrapEnabled && _this._focusTrap) {\n                        _this._trapFocus();\n                    }\n                }\n                else {\n                    _this._restoreFocus();\n                }\n            });\n            /**\n             * Listen to `keydown` events outside the zone so that change detection is not run every\n             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n             * and we don't have close disabled.\n             */\n            this._ngZone.runOutsideAngular(function () {\n                rxjs.fromEvent(_this._elementRef.nativeElement, 'keydown').pipe(operators.filter(function (event) {\n                    return event.keyCode === keycodes.ESCAPE && !_this.disableClose && !keycodes.hasModifierKey(event);\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (event) { return _this._ngZone.run(function () {\n                    _this.close();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }); });\n            });\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._animationEnd.pipe(operators.distinctUntilChanged(function (x, y) {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(function (event) {\n                var fromState = event.fromState, toState = event.toState;\n                if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                    (toState === 'void' && fromState.indexOf('open') === 0)) {\n                    _this.openedChange.emit(_this._opened);\n                }\n            });\n        }\n        Object.defineProperty(MatDrawer.prototype, \"position\", {\n            /** The side that the drawer is attached to. */\n            get: function () { return this._position; },\n            set: function (value) {\n                // Make sure we have a valid value.\n                value = value === 'end' ? 'end' : 'start';\n                if (value != this._position) {\n                    this._position = value;\n                    this.onPositionChanged.emit();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"mode\", {\n            /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n            get: function () { return this._mode; },\n            set: function (value) {\n                this._mode = value;\n                this._updateFocusTrapState();\n                this._modeChanged.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"disableClose\", {\n            /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n            get: function () { return this._disableClose; },\n            set: function (value) { this._disableClose = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"autoFocus\", {\n            /** Whether the drawer should focus the first focusable element automatically when opened. */\n            get: function () { return this._autoFocus; },\n            set: function (value) { this._autoFocus = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"opened\", {\n            /**\n             * Whether the drawer is opened. We overload this because we trigger an event when it\n             * starts or end.\n             */\n            get: function () { return this._opened; },\n            set: function (value) { this.toggle(coercion.coerceBooleanProperty(value)); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_openedStream\", {\n            /** Event emitted when the drawer has been opened. */\n            get: function () {\n                return this.openedChange.pipe(operators.filter(function (o) { return o; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"openedStart\", {\n            /** Event emitted when the drawer has started opening. */\n            get: function () {\n                return this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_closedStream\", {\n            /** Event emitted when the drawer has been closed. */\n            get: function () {\n                return this.openedChange.pipe(operators.filter(function (o) { return !o; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"closedStart\", {\n            /** Event emitted when the drawer has started closing. */\n            get: function () {\n                return this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState === 'void'; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_isFocusTrapEnabled\", {\n            get: function () {\n                // The focus trap is only enabled when the drawer is open in any mode other than side.\n                return this.opened && this.mode !== 'side';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Traps focus inside the drawer. */\n        MatDrawer.prototype._trapFocus = function () {\n            var _this = this;\n            if (!this.autoFocus) {\n                return;\n            }\n            this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n                // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n                // still works. We need to check that `focus` is a function due to Universal.\n                if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {\n                    _this._elementRef.nativeElement.focus();\n                }\n            });\n        };\n        /**\n         * If focus is currently inside the drawer, restores it to where it was before the drawer\n         * opened.\n         */\n        MatDrawer.prototype._restoreFocus = function () {\n            if (!this.autoFocus) {\n                return;\n            }\n            var activeEl = this._doc && this._doc.activeElement;\n            if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n                if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                    this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n                }\n                else {\n                    this._elementRef.nativeElement.blur();\n                }\n            }\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            this._openedVia = null;\n        };\n        MatDrawer.prototype.ngAfterContentInit = function () {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        };\n        MatDrawer.prototype.ngAfterContentChecked = function () {\n            // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n            // drawers that are open by default. When we're on the server, we shouldn't enable the\n            // animations, because we don't want the drawer to animate the first time the user sees\n            // the page.\n            if (this._platform.isBrowser) {\n                this._enableAnimations = true;\n            }\n        };\n        MatDrawer.prototype.ngOnDestroy = function () {\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n            this._animationStarted.complete();\n            this._animationEnd.complete();\n            this._modeChanged.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Open the drawer.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        MatDrawer.prototype.open = function (openedVia) {\n            return this.toggle(true, openedVia);\n        };\n        /** Close the drawer. */\n        MatDrawer.prototype.close = function () {\n            return this.toggle(false);\n        };\n        /**\n         * Toggle this drawer.\n         * @param isOpen Whether the drawer should be open.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        MatDrawer.prototype.toggle = function (isOpen, openedVia) {\n            var _this = this;\n            if (isOpen === void 0) { isOpen = !this.opened; }\n            if (openedVia === void 0) { openedVia = 'program'; }\n            this._opened = isOpen;\n            if (isOpen) {\n                this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n                this._openedVia = openedVia;\n            }\n            else {\n                this._animationState = 'void';\n                this._restoreFocus();\n            }\n            this._updateFocusTrapState();\n            return new Promise(function (resolve) {\n                _this.openedChange.pipe(operators.take(1)).subscribe(function (open) { return resolve(open ? 'open' : 'close'); });\n            });\n        };\n        Object.defineProperty(MatDrawer.prototype, \"_width\", {\n            get: function () {\n                return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Updates the enabled state of the focus trap. */\n        MatDrawer.prototype._updateFocusTrapState = function () {\n            if (this._focusTrap) {\n                this._focusTrap.enabled = this._isFocusTrapEnabled;\n            }\n        };\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatDrawer.prototype._animationStartListener = function (event) {\n            this._animationStarted.next(event);\n        };\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatDrawer.prototype._animationDoneListener = function (event) {\n            this._animationEnd.next(event);\n        };\n        MatDrawer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-drawer',\n                        exportAs: 'matDrawer',\n                        template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                        animations: [matDrawerAnimations.transformDrawer],\n                        host: {\n                            'class': 'mat-drawer',\n                            // must prevent the browser from aligning text based on value\n                            '[attr.align]': 'null',\n                            '[class.mat-drawer-end]': 'position === \"end\"',\n                            '[class.mat-drawer-over]': 'mode === \"over\"',\n                            '[class.mat-drawer-push]': 'mode === \"push\"',\n                            '[class.mat-drawer-side]': 'mode === \"side\"',\n                            '[class.mat-drawer-opened]': 'opened',\n                            'tabIndex': '-1',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: a11y.FocusTrapFactory },\n            { type: a11y.FocusMonitor },\n            { type: platform.Platform },\n            { type: core.NgZone },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: MatDrawerContainer, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n        ]; };\n        MatDrawer.propDecorators = {\n            position: [{ type: core.Input }],\n            mode: [{ type: core.Input }],\n            disableClose: [{ type: core.Input }],\n            autoFocus: [{ type: core.Input }],\n            opened: [{ type: core.Input }],\n            _animationState: [{ type: core.HostBinding, args: ['@transform',] }],\n            openedChange: [{ type: core.Output }],\n            _openedStream: [{ type: core.Output, args: ['opened',] }],\n            openedStart: [{ type: core.Output }],\n            _closedStream: [{ type: core.Output, args: ['closed',] }],\n            closedStart: [{ type: core.Output }],\n            onPositionChanged: [{ type: core.Output, args: ['positionChanged',] }],\n            _animationStartListener: [{ type: core.HostListener, args: ['@transform.start', ['$event'],] }],\n            _animationDoneListener: [{ type: core.HostListener, args: ['@transform.done', ['$event'],] }]\n        };\n        return MatDrawer;\n    }());\n    /**\n     * `<mat-drawer-container>` component.\n     *\n     * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n     * and coordinates the backdrop and content styling.\n     */\n    var MatDrawerContainer = /** @class */ (function () {\n        function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize, _animationMode) {\n            var _this = this;\n            if (defaultAutosize === void 0) { defaultAutosize = false; }\n            this._dir = _dir;\n            this._element = _element;\n            this._ngZone = _ngZone;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            /** Drawers that belong to this container. */\n            this._drawers = new core.QueryList();\n            /** Event emitted when the drawer backdrop is clicked. */\n            this.backdropClick = new core.EventEmitter();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Emits on every ngDoCheck. Used for debouncing reflows. */\n            this._doCheckSubject = new rxjs.Subject();\n            /**\n             * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n             * drawer is open. We use margin rather than transform even for push mode because transform breaks\n             * fixed position elements inside of the transformed element.\n             */\n            this._contentMargins = { left: null, right: null };\n            this._contentMarginChanges = new rxjs.Subject();\n            // If a `Dir` directive exists up the tree, listen direction changes\n            // and update the left/right properties to point to the proper start/end.\n            if (_dir) {\n                _dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                    _this._validateDrawers();\n                    _this.updateContentMargins();\n                });\n            }\n            // Since the minimum width of the sidenav depends on the viewport width,\n            // we need to recompute the margins if the viewport changes.\n            viewportRuler.change()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this.updateContentMargins(); });\n            this._autosize = defaultAutosize;\n        }\n        Object.defineProperty(MatDrawerContainer.prototype, \"start\", {\n            /** The drawer child with the `start` position. */\n            get: function () { return this._start; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"end\", {\n            /** The drawer child with the `end` position. */\n            get: function () { return this._end; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"autosize\", {\n            /**\n             * Whether to automatically resize the container whenever\n             * the size of any of its drawers changes.\n             *\n             * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n             * the drawers on every change detection cycle. Can be configured globally via the\n             * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n             */\n            get: function () { return this._autosize; },\n            set: function (value) { this._autosize = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"hasBackdrop\", {\n            /**\n             * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n             * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n             * mode as well.\n             */\n            get: function () {\n                if (this._backdropOverride == null) {\n                    return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n                }\n                return this._backdropOverride;\n            },\n            set: function (value) {\n                this._backdropOverride = value == null ? null : coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"scrollable\", {\n            /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n            get: function () {\n                return this._userContent || this._content;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatDrawerContainer.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._allDrawers.changes\n                .pipe(operators.startWith(this._allDrawers), operators.takeUntil(this._destroyed))\n                .subscribe(function (drawer) {\n                // @breaking-change 10.0.0 Remove `_container` check once container parameter is required.\n                _this._drawers.reset(drawer.filter(function (item) { return !item._container || item._container === _this; }));\n                _this._drawers.notifyOnChanges();\n            });\n            this._drawers.changes.pipe(operators.startWith(null)).subscribe(function () {\n                _this._validateDrawers();\n                _this._drawers.forEach(function (drawer) {\n                    _this._watchDrawerToggle(drawer);\n                    _this._watchDrawerPosition(drawer);\n                    _this._watchDrawerMode(drawer);\n                });\n                if (!_this._drawers.length ||\n                    _this._isDrawerOpen(_this._start) ||\n                    _this._isDrawerOpen(_this._end)) {\n                    _this.updateContentMargins();\n                }\n                _this._changeDetectorRef.markForCheck();\n            });\n            this._doCheckSubject.pipe(operators.debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            operators.takeUntil(this._destroyed)).subscribe(function () { return _this.updateContentMargins(); });\n        };\n        MatDrawerContainer.prototype.ngOnDestroy = function () {\n            this._contentMarginChanges.complete();\n            this._doCheckSubject.complete();\n            this._drawers.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Calls `open` of both start and end drawers */\n        MatDrawerContainer.prototype.open = function () {\n            this._drawers.forEach(function (drawer) { return drawer.open(); });\n        };\n        /** Calls `close` of both start and end drawers */\n        MatDrawerContainer.prototype.close = function () {\n            this._drawers.forEach(function (drawer) { return drawer.close(); });\n        };\n        /**\n         * Recalculates and updates the inline styles for the content. Note that this should be used\n         * sparingly, because it causes a reflow.\n         */\n        MatDrawerContainer.prototype.updateContentMargins = function () {\n            var _this = this;\n            // 1. For drawers in `over` mode, they don't affect the content.\n            // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n            //    left margin (for left drawer) or right margin (for right the drawer).\n            // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n            //    adding to the left or right margin and simultaneously subtracting the same amount of\n            //    margin from the other side.\n            var left = 0;\n            var right = 0;\n            if (this._left && this._left.opened) {\n                if (this._left.mode == 'side') {\n                    left += this._left._width;\n                }\n                else if (this._left.mode == 'push') {\n                    var width = this._left._width;\n                    left += width;\n                    right -= width;\n                }\n            }\n            if (this._right && this._right.opened) {\n                if (this._right.mode == 'side') {\n                    right += this._right._width;\n                }\n                else if (this._right.mode == 'push') {\n                    var width = this._right._width;\n                    right += width;\n                    left -= width;\n                }\n            }\n            // If either `right` or `left` is zero, don't set a style to the element. This\n            // allows users to specify a custom size via CSS class in SSR scenarios where the\n            // measured widths will always be zero. Note that we reset to `null` here, rather\n            // than below, in order to ensure that the types in the `if` below are consistent.\n            left = left || null;\n            right = right || null;\n            if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n                this._contentMargins = { left: left, right: right };\n                // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n                // to do it only when something changed, otherwise we can end up hitting the zone too often.\n                this._ngZone.run(function () { return _this._contentMarginChanges.next(_this._contentMargins); });\n            }\n        };\n        MatDrawerContainer.prototype.ngDoCheck = function () {\n            var _this = this;\n            // If users opted into autosizing, do a check every change detection cycle.\n            if (this._autosize && this._isPushed()) {\n                // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n                this._ngZone.runOutsideAngular(function () { return _this._doCheckSubject.next(); });\n            }\n        };\n        /**\n         * Subscribes to drawer events in order to set a class on the main container element when the\n         * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n         * is properly hidden.\n         */\n        MatDrawerContainer.prototype._watchDrawerToggle = function (drawer) {\n            var _this = this;\n            drawer._animationStarted.pipe(operators.filter(function (event) { return event.fromState !== event.toState; }), operators.takeUntil(this._drawers.changes))\n                .subscribe(function (event) {\n                // Set the transition class on the container so that the animations occur. This should not\n                // be set initially because animations should only be triggered via a change in state.\n                if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {\n                    _this._element.nativeElement.classList.add('mat-drawer-transition');\n                }\n                _this.updateContentMargins();\n                _this._changeDetectorRef.markForCheck();\n            });\n            if (drawer.mode !== 'side') {\n                drawer.openedChange.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {\n                    return _this._setContainerClass(drawer.opened);\n                });\n            }\n        };\n        /**\n         * Subscribes to drawer onPositionChanged event in order to\n         * re-validate drawers when the position changes.\n         */\n        MatDrawerContainer.prototype._watchDrawerPosition = function (drawer) {\n            var _this = this;\n            if (!drawer) {\n                return;\n            }\n            // NOTE: We need to wait for the microtask queue to be empty before validating,\n            // since both drawers may be swapping positions at the same time.\n            drawer.onPositionChanged.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {\n                _this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1)).subscribe(function () {\n                    _this._validateDrawers();\n                });\n            });\n        };\n        /** Subscribes to changes in drawer mode so we can run change detection. */\n        MatDrawerContainer.prototype._watchDrawerMode = function (drawer) {\n            var _this = this;\n            if (drawer) {\n                drawer._modeChanged.pipe(operators.takeUntil(rxjs.merge(this._drawers.changes, this._destroyed)))\n                    .subscribe(function () {\n                    _this.updateContentMargins();\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n        MatDrawerContainer.prototype._setContainerClass = function (isAdd) {\n            var classList = this._element.nativeElement.classList;\n            var className = 'mat-drawer-container-has-open';\n            if (isAdd) {\n                classList.add(className);\n            }\n            else {\n                classList.remove(className);\n            }\n        };\n        /** Validate the state of the drawer children components. */\n        MatDrawerContainer.prototype._validateDrawers = function () {\n            var _this = this;\n            this._start = this._end = null;\n            // Ensure that we have at most one start and one end drawer.\n            this._drawers.forEach(function (drawer) {\n                if (drawer.position == 'end') {\n                    if (_this._end != null) {\n                        throwMatDuplicatedDrawerError('end');\n                    }\n                    _this._end = drawer;\n                }\n                else {\n                    if (_this._start != null) {\n                        throwMatDuplicatedDrawerError('start');\n                    }\n                    _this._start = drawer;\n                }\n            });\n            this._right = this._left = null;\n            // Detect if we're LTR or RTL.\n            if (this._dir && this._dir.value === 'rtl') {\n                this._left = this._end;\n                this._right = this._start;\n            }\n            else {\n                this._left = this._start;\n                this._right = this._end;\n            }\n        };\n        /** Whether the container is being pushed to the side by one of the drawers. */\n        MatDrawerContainer.prototype._isPushed = function () {\n            return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n                (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n        };\n        MatDrawerContainer.prototype._onBackdropClicked = function () {\n            this.backdropClick.emit();\n            this._closeModalDrawer();\n        };\n        MatDrawerContainer.prototype._closeModalDrawer = function () {\n            var _this = this;\n            // Close all open drawers where closing is not disabled and the mode is not `side`.\n            [this._start, this._end]\n                .filter(function (drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); })\n                .forEach(function (drawer) { return drawer.close(); });\n        };\n        MatDrawerContainer.prototype._isShowingBackdrop = function () {\n            return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n        };\n        MatDrawerContainer.prototype._canHaveBackdrop = function (drawer) {\n            return drawer.mode !== 'side' || !!this._backdropOverride;\n        };\n        MatDrawerContainer.prototype._isDrawerOpen = function (drawer) {\n            return drawer != null && drawer.opened;\n        };\n        MatDrawerContainer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-drawer-container',\n                        exportAs: 'matDrawerContainer',\n                        template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                        host: {\n                            'class': 'mat-drawer-container',\n                            '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        providers: [{\n                                provide: MAT_DRAWER_CONTAINER,\n                                useExisting: MatDrawerContainer\n                            }],\n                        styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawerContainer.ctorParameters = function () { return [\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: core.ChangeDetectorRef },\n            { type: scrolling.ViewportRuler },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatDrawerContainer.propDecorators = {\n            _allDrawers: [{ type: core.ContentChildren, args: [MatDrawer, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }],\n            _content: [{ type: core.ContentChild, args: [MatDrawerContent,] }],\n            _userContent: [{ type: core.ViewChild, args: [MatDrawerContent,] }],\n            autosize: [{ type: core.Input }],\n            hasBackdrop: [{ type: core.Input }],\n            backdropClick: [{ type: core.Output }]\n        };\n        return MatDrawerContainer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSidenavContent = /** @class */ (function (_super) {\n        tslib.__extends(MatSidenavContent, _super);\n        function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n            return _super.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) || this;\n        }\n        MatSidenavContent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-sidenav-content',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-drawer-content mat-sidenav-content',\n                            '[style.margin-left.px]': '_container._contentMargins.left',\n                            '[style.margin-right.px]': '_container._contentMargins.right',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSidenavContent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: MatSidenavContainer, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return MatSidenavContainer; }),] }] },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.NgZone }\n        ]; };\n        return MatSidenavContent;\n    }(MatDrawerContent));\n    var MatSidenav = /** @class */ (function (_super) {\n        tslib.__extends(MatSidenav, _super);\n        function MatSidenav() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._fixedInViewport = false;\n            _this._fixedTopGap = 0;\n            _this._fixedBottomGap = 0;\n            return _this;\n        }\n        Object.defineProperty(MatSidenav.prototype, \"fixedInViewport\", {\n            /** Whether the sidenav is fixed in the viewport. */\n            get: function () { return this._fixedInViewport; },\n            set: function (value) { this._fixedInViewport = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSidenav.prototype, \"fixedTopGap\", {\n            /**\n             * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n             * mode.\n             */\n            get: function () { return this._fixedTopGap; },\n            set: function (value) { this._fixedTopGap = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSidenav.prototype, \"fixedBottomGap\", {\n            /**\n             * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n             * fixed mode.\n             */\n            get: function () { return this._fixedBottomGap; },\n            set: function (value) { this._fixedBottomGap = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatSidenav.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-sidenav',\n                        exportAs: 'matSidenav',\n                        template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                        animations: [matDrawerAnimations.transformDrawer],\n                        host: {\n                            'class': 'mat-drawer mat-sidenav',\n                            'tabIndex': '-1',\n                            // must prevent the browser from aligning text based on value\n                            '[attr.align]': 'null',\n                            '[class.mat-drawer-end]': 'position === \"end\"',\n                            '[class.mat-drawer-over]': 'mode === \"over\"',\n                            '[class.mat-drawer-push]': 'mode === \"push\"',\n                            '[class.mat-drawer-side]': 'mode === \"side\"',\n                            '[class.mat-drawer-opened]': 'opened',\n                            '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                            '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                            '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        MatSidenav.propDecorators = {\n            fixedInViewport: [{ type: core.Input }],\n            fixedTopGap: [{ type: core.Input }],\n            fixedBottomGap: [{ type: core.Input }]\n        };\n        return MatSidenav;\n    }(MatDrawer));\n    var MatSidenavContainer = /** @class */ (function (_super) {\n        tslib.__extends(MatSidenavContainer, _super);\n        function MatSidenavContainer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatSidenavContainer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-sidenav-container',\n                        exportAs: 'matSidenavContainer',\n                        template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                        host: {\n                            'class': 'mat-drawer-container mat-sidenav-container',\n                            '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        providers: [{\n                                provide: MAT_DRAWER_CONTAINER,\n                                useExisting: MatSidenavContainer\n                            }],\n                        styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n                    }] }\n        ];\n        MatSidenavContainer.propDecorators = {\n            _allDrawers: [{ type: core.ContentChildren, args: [MatSidenav, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }],\n            _content: [{ type: core.ContentChild, args: [MatSidenavContent,] }]\n        };\n        return MatSidenavContainer;\n    }(MatDrawerContainer));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSidenavModule = /** @class */ (function () {\n        function MatSidenavModule() {\n        }\n        MatSidenavModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            core$1.MatCommonModule,\n                            scrolling.ScrollingModule,\n                            platform.PlatformModule,\n                        ],\n                        exports: [\n                            core$1.MatCommonModule,\n                            MatDrawer,\n                            MatDrawerContainer,\n                            MatDrawerContent,\n                            MatSidenav,\n                            MatSidenavContainer,\n                            MatSidenavContent,\n                        ],\n                        declarations: [\n                            MatDrawer,\n                            MatDrawerContainer,\n                            MatDrawerContent,\n                            MatSidenav,\n                            MatSidenavContainer,\n                            MatSidenavContent,\n                        ],\n                    },] }\n        ];\n        return MatSidenavModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_DRAWER_DEFAULT_AUTOSIZE = MAT_DRAWER_DEFAULT_AUTOSIZE;\n    exports.MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY = MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY;\n    exports.MatDrawer = MatDrawer;\n    exports.MatDrawerContainer = MatDrawerContainer;\n    exports.MatDrawerContent = MatDrawerContent;\n    exports.MatSidenav = MatSidenav;\n    exports.MatSidenavContainer = MatSidenavContainer;\n    exports.MatSidenavContent = MatSidenavContent;\n    exports.MatSidenavModule = MatSidenavModule;\n    exports.matDrawerAnimations = matDrawerAnimations;\n    exports.throwMatDuplicatedDrawerError = throwMatDuplicatedDrawerError;\n    exports.Éµangular_material_src_material_sidenav_sidenav_a = MAT_DRAWER_CONTAINER;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-sidenav.umd.js.map\n"]}